#!groovy
def repositoryUrl = 'tiggomark'
def waitConfigAppScript = './wait-for-it.sh -s 200 -h http://config-app:8888/eureka-server-app/default'
def waitEurekaServerAppScript = './wait-for-it.sh -s 200 -h http://eureka-server-app:8761'
def mysqlRootPassword='';

node {


    stage(name: 'Checkout from SCM') {
        echo 'Checking out from scm'
        checkout scm
    }

    stage(name: 'pre-config workspace'){
        sh 'chmod +x wait-for-it.sh'
    }

    stage(name: 'Configure credentials'){
        withCredentials([usernamePassword(credentialsId: 'database', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {

            mysqlRootPassword = PASSWORD;
            echo "MYSQL PASSWORD = ${mysqlRootPassword}"
        }
    }

    stage(name: 'database-app') {

        sh "docker run --name database-app  \
            -p 3306:3306 \
            -e MYSQL_ROOT_PASSWORD=${mysqlRootPassword} -e MYSQL_DATABASE=customer_app \
            --network cluster-network \
            -d mysql:5.7.38"


    }

    stage(name: 'Up config-app') {
        echo 'Deploying config-app'
        sh "docker rm --force config-app"
        sh "docker run --rm --network cluster-network -p 8888:8888    --name config-app -d  ${repositoryUrl}/config-app:latest"
    }

    stage(name: 'Up eureka-server-app') {
        echo 'Deploying eureka-server-app'
        echo 'Waiting config-app..'
        sh "${waitConfigAppScript}"
        echo 'config-app is Up!'
        sh 'sleep 15s'
        sh "docker rm --force eureka-server-app"
        sh "docker run --network cluster-network -p 8761:8761 --name eureka-server-app -d  ${repositoryUrl}/eureka-server-app:latest"
    }

    stage(name: 'Up Api Gateway') {
        echo 'Deploying api-gateway-app'
        echo 'Waiting eureka-server-app...'
        sh "${waitEurekaServerAppScript}"
        echo 'eureka is Up!'
        sh "docker rm --force api-gateway-app"
        sh "docker run --rm --network cluster-network -p 8081:8081 --name api-gateway-app -d  ${repositoryUrl}/api-gateway-app:latest"
    }

    stage(name: 'Up customer-app') {
        sh "docker run --network cluster-network  -e SPRING_DATASOURCE_PASSWORD=${mysqlRootPassword} -d  ${repositoryUrl}/customer-app:latest"
    }





}



def sendMsgToSlack(text) {

/*
    try {
        build(job: "send-slack-message",
                parameters: [
                        string(name: "TITLE", value: "[${PROJECT_NAME}][${branch}]"),
                        string(name: "TITLELINK", value: env.BUILD_URL),
                        string(name: "TEXT", value: text),
                        string(name: "CHANNEL", value: "#podolsk-alerts")
                ]
        )
    } catch (all) {
        echo "Não foi possível enviar a mensagem para o canal #podolsk-alerts"
        echo "Error: ${all.message}"
    }
    */
}

def getVersion() {
    def lines = readFile("${env.WORKSPACE}/gradle.properties").split("\n")

    return lines.find { it.contains("version") }
            .split("=")[1]
            .trim()
}
#!groovy
def repositoryUrl = 'tiggomark'

node {


    stage(name: 'Checkout from SCM') {
        echo 'Checking out from scm'
        checkout scm
    }

    stage(name: 'Up config-app') {
        echo 'Deploying config-app'
        sh "docker rm --force config-app"
        sh "docker run --rm --network cluster-network -p 8888:8888 --name config-app -d  ${repositoryUrl}/config-app:latest"
    }

    stage(name: 'Up eureka-server-app') {
        echo 'Deploying eureka-server-app'
        echo 'Waiting config-app..'
        sh 'chmod +x wait-for-it.sh'
        sh "./wait-for-it.sh -s 200 -h http://config-app:8888/config/default"
        echo 'config-app is Up!'
        sh "docker rm --force eureka-server-app"
        sh "docker run --rm --network cluster-network -p 8761:8761 --name eureka-server-app -d  ${repositoryUrl}/eureka-server-app:latest"
    }



}



def sendMsgToSlack(text) {

/*
    try {
        build(job: "send-slack-message",
                parameters: [
                        string(name: "TITLE", value: "[${PROJECT_NAME}][${branch}]"),
                        string(name: "TITLELINK", value: env.BUILD_URL),
                        string(name: "TEXT", value: text),
                        string(name: "CHANNEL", value: "#podolsk-alerts")
                ]
        )
    } catch (all) {
        echo "Não foi possível enviar a mensagem para o canal #podolsk-alerts"
        echo "Error: ${all.message}"
    }
    */
}

def getVersion() {
    def lines = readFile("${env.WORKSPACE}/gradle.properties").split("\n")

    return lines.find { it.contains("version") }
            .split("=")[1]
            .trim()
}